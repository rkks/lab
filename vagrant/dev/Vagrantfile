# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|

  # OS to use for VM to be spawned, default: ubuntu1804
  vos = ( ENV['RK_VAGRANT_OS'] || "ubuntu1804")
  if vos == 'ubuntu1804'
    config.vm.box = "hashicorp/bionic64"
  elsif vos == 'ubuntu1604'
    config.vm.box = "bento/ubuntu-16.04"
    #config.vm.box_version = "16.04"
    #config.ssh.insert_key = false
  else
    config.vm.box = "puppetlabs/ubuntu-16.04-64-nocm"
  end
  config.vm.box_check_update = false

  # Provision of new VMs can happen through shell scripts, not need of Ansible.
  # Shell provisioner allows to upload and execute script 
  #config.vm.provision :shell, :path => "wget", :args => "https://raw.githubusercontent.com/rkks/scripts/master/bash/conf.sh"
  # Inline cmds/script is run directly on guest VM
  config.vm.provision "shell", inline: "curl -OJLs https://raw.githubusercontent.com/rkks/scripts/master/bash/conf.sh"
  #config.vm.provision :shell, :path => File.join(File.dirname(__FILE__),"conf.sh"), :args => "-i -p -n -s -l -c"
  config.vm.provision :shell, :path => "https://raw.githubusercontent.com/rkks/scripts/master/bash/conf.sh", :args => "-i -p -n -s -l -c"

  vtype = ( ENV['RK_VAGRANT_TYPE'] )
  if vtype == "dev"
    config.vm.provision "shell", inline: "echo Bringing up Dev VM; cd; id"
  elsif vtype == "test"
    #config.vm.provision :shell, :path => File.join(File.dirname(__FILE__),"run.sh")
  end

  # Add .gnupg dir in so folks can sign patches
  # Note, as gnupg puts socket files in that dir, we have
  # to be cautious and make sure we are dealing with a plain file
  #homedir = File.expand_path("~/")
  #Dir["#{homedir}/.ssh/**/*"].each do |fname|
  #  if File.file?(fname)
  #    destname = fname.sub(Regexp.escape("#{homedir}/"),'')
  #    config.vm.provision "file", source: fname, destination: destname
  #  end
  #end

  # Copy in the .gitconfig if it exists
  if File.file?(File.expand_path("~/.gitconfig"))
    config.vm.provision  "file", source: "~/.gitconfig", destination: ".gitconfig"
  end

  # vagrant-cachier caches apt/yum etc to speed subsequent
  # vagrant up
  # to enable, run
  # vagrant plugin install vagrant-cachier
  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.scope = :box
  end

  # Define some physical ports for your VMs to be used by DPDK
  nics = (ENV['RK_VAGRANT_NNIC'] || "2").to_i(10)
  for i in 1..nics
    config.vm.network "private_network", type: "dhcp"
  end

  # use http proxy if avaiable
  #if ENV['http_proxy'] && Vagrant.has_plugin?("vagrant-proxyconf")
  # config.proxy.http     = ENV['http_proxy']
  # config.proxy.https    = ENV['https_proxy']
  # config.proxy.no_proxy = "localhost,127.0.0.1"
  #end

  vmcpu=(ENV['RK_VAGRANT_VCPU'] || 8)
  vmram=(ENV['RK_VAGRANT_VRAM'] || 16384)

  config.ssh.forward_agent = true
  config.ssh.forward_x11 = true

  config.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--ioapic", "on"]
      vb.memory = "#{vmram}"
      vb.cpus = "#{vmcpu}"

      # rsync the proj directory if provision hasn't happened yet
      #unless File.exist? (".vagrant/machines/default/virtualbox/action_provision")
      #  config.vm.synced_folder "../../", "/proj", type: "rsync",
      #   rsync__auto: false,
      #   rsync__exclude: [
      #    "build-root/tools"]
      #end

      #support for the SSE4.x instruction is required in some versions of VB.
      vb.customize ["setextradata", :id, "VBoxInternal/CPUM/SSE4.1", "1"]
      vb.customize ["setextradata", :id, "VBoxInternal/CPUM/SSE4.2", "1"]
  end
  config.vm.provider "libvirt" do |lv|
    lv.memory = "#{vmram}"
    lv.cpus = "#{vmcpu}"
  end
end
